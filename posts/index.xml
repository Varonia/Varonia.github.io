<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 凛冬</title>
        <link>https://github.com/Varonia/Varonia.github.io/posts/</link>
        <description>Recent content in Posts on 凛冬</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 30 Jul 2020 23:12:20 +0800</lastBuildDate>
        <atom:link href="https://github.com/Varonia/Varonia.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>EventBus简单理解</title>
            <link>https://github.com/Varonia/Varonia.github.io/posts/2020/07/eventbus%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</link>
            <pubDate>Thu, 30 Jul 2020 23:12:20 +0800</pubDate>
            
            <guid>https://github.com/Varonia/Varonia.github.io/posts/2020/07/eventbus%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</guid>
            <description>什么是EventBus？其实就是事件的订阅与发布，广泛用于页面之间的传值，原理： ##实现EventBus ` // 构造EventBus function EventBusClass() { this.msgQueues = {} }
EventBusClass.prototype = { // 将消息保存到当前的消息队列中 on: function(msgName, func) { if (this.msgQueues.hasOwnProperty(msgName)) { if (typeof this.msgQueues[msgName] === &amp;lsquo;function&amp;rsquo;) { this.msgQueues[msgName] = [this.msgQueues[msgName], func] } else { this.msgQueues[msgName] = [&amp;hellip;this.msgQueues[msgName], func] } } else { this.msgQueues[msgName] = func; } }, // 消息队列中仅保存一个消息 one: function(msgName, func) { // 无需检查msgName是否存在 this.msgQueues[msgName] = func; }, // 发送消息 emit: function(msgName, msg) { if (!this.msgQueues.hasOwnProperty(msgName)) { return } if (typeof this.</description>
            <content type="html"><![CDATA[<p>什么是EventBus？其实就是事件的订阅与发布，广泛用于页面之间的传值，原理：
<img src="https://resource.liujiaweb.com/wp-content/uploads/2018/11/eventBusE58E9FE79086-768x288.png" alt="原理图"></p>
<p>##实现EventBus
`
// 构造EventBus
function EventBusClass() {
this.msgQueues = {}
}</p>
<p>EventBusClass.prototype = {
// 将消息保存到当前的消息队列中
on: function(msgName, func) {
if (this.msgQueues.hasOwnProperty(msgName)) {
if (typeof this.msgQueues[msgName] === &lsquo;function&rsquo;) {
this.msgQueues[msgName] = [this.msgQueues[msgName], func]             <br>
} else {
this.msgQueues[msgName] = [&hellip;this.msgQueues[msgName], func] <br>
}
} else {
this.msgQueues[msgName] = func;
}
},
// 消息队列中仅保存一个消息
one: function(msgName, func) {
// 无需检查msgName是否存在
this.msgQueues[msgName] = func;
},
// 发送消息
emit: function(msgName, msg) {
if (!this.msgQueues.hasOwnProperty(msgName)) {
return
}
if (typeof this.msgQueues[msgName] === &lsquo;function&rsquo;) {
this.msgQueues<a href="msg">msgName</a>
} else {
this.msgQueues[msgName].map((fn) =&gt; {
fn(msg)
})
}
},
// 移除消息
off: function(msgName) {
if (!this.msgQueues.hasOwnProperty(msgName)) {
return
}
delete this.msgQueues[msgName]
}
}</p>
<p>// 将EventBus放到window对象中
const EventBus = new EventBusClass()
window.EventBus = EventBus
`</p>
<p>##使用EventBus
<code>// 订阅消息 function subscribe() { EventBus.on('first-event', function(msg) { alert(</code>订阅的消息是：${msg}`);
});
}</p>
<p>// 发送消息
function emit() {
const msgInput = document.getElementById(&ldquo;msgInputId&rdquo;)
EventBus.emit(&lsquo;first-event&rsquo;, msgInput.value)
}</p>
<p>// 移除消息
function off(msgName) {
EventBus.off(msgName)
}</p>
<p>`</p>
]]></content>
        </item>
        
        <item>
            <title>Hello Hugo</title>
            <link>https://github.com/Varonia/Varonia.github.io/posts/2020/05/hello-hugo/</link>
            <pubDate>Sun, 17 May 2020 22:00:38 +0800</pubDate>
            
            <guid>https://github.com/Varonia/Varonia.github.io/posts/2020/05/hello-hugo/</guid>
            <description>Hello Hugo ! </description>
            <content type="html"><![CDATA[<h2 id="hello-hugo-">Hello Hugo !</h2>
]]></content>
        </item>
        
    </channel>
</rss>
